package com.proyecto.quental.chat.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.proyecto.quental.chat.model.Asignacion;
import com.proyecto.quental.chat.service.AsignacionLocalService;
import com.proyecto.quental.chat.service.persistence.AsignacionPersistence;
import com.proyecto.quental.chat.service.persistence.ConversacionPersistence;
import com.proyecto.quental.chat.service.persistence.MensajePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the asignacion local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.proyecto.quental.chat.service.impl.AsignacionLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.proyecto.quental.chat.service.impl.AsignacionLocalServiceImpl
 * @see com.proyecto.quental.chat.service.AsignacionLocalServiceUtil
 * @generated
 */
public abstract class AsignacionLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements AsignacionLocalService,
        IdentifiableBean {
    @BeanReference(type = com.proyecto.quental.chat.service.AsignacionLocalService.class)
    protected com.proyecto.quental.chat.service.AsignacionLocalService asignacionLocalService;
    @BeanReference(type = com.proyecto.quental.chat.service.AsignacionService.class)
    protected com.proyecto.quental.chat.service.AsignacionService asignacionService;
    @BeanReference(type = AsignacionPersistence.class)
    protected AsignacionPersistence asignacionPersistence;
    @BeanReference(type = com.proyecto.quental.chat.service.ConversacionLocalService.class)
    protected com.proyecto.quental.chat.service.ConversacionLocalService conversacionLocalService;
    @BeanReference(type = com.proyecto.quental.chat.service.ConversacionService.class)
    protected com.proyecto.quental.chat.service.ConversacionService conversacionService;
    @BeanReference(type = ConversacionPersistence.class)
    protected ConversacionPersistence conversacionPersistence;
    @BeanReference(type = com.proyecto.quental.chat.service.MensajeLocalService.class)
    protected com.proyecto.quental.chat.service.MensajeLocalService mensajeLocalService;
    @BeanReference(type = com.proyecto.quental.chat.service.MensajeService.class)
    protected com.proyecto.quental.chat.service.MensajeService mensajeService;
    @BeanReference(type = MensajePersistence.class)
    protected MensajePersistence mensajePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AsignacionLocalServiceClpInvoker _clpInvoker = new AsignacionLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.proyecto.quental.chat.service.AsignacionLocalServiceUtil} to access the asignacion local service.
     */

    /**
     * Adds the asignacion to the database. Also notifies the appropriate model listeners.
     *
     * @param asignacion the asignacion
     * @return the asignacion that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Asignacion addAsignacion(Asignacion asignacion)
        throws SystemException {
        asignacion.setNew(true);

        return asignacionPersistence.update(asignacion);
    }

    /**
     * Creates a new asignacion with the primary key. Does not add the asignacion to the database.
     *
     * @param asignacionId the primary key for the new asignacion
     * @return the new asignacion
     */
    @Override
    public Asignacion createAsignacion(long asignacionId) {
        return asignacionPersistence.create(asignacionId);
    }

    /**
     * Deletes the asignacion with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param asignacionId the primary key of the asignacion
     * @return the asignacion that was removed
     * @throws PortalException if a asignacion with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Asignacion deleteAsignacion(long asignacionId)
        throws PortalException, SystemException {
        return asignacionPersistence.remove(asignacionId);
    }

    /**
     * Deletes the asignacion from the database. Also notifies the appropriate model listeners.
     *
     * @param asignacion the asignacion
     * @return the asignacion that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Asignacion deleteAsignacion(Asignacion asignacion)
        throws SystemException {
        return asignacionPersistence.remove(asignacion);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Asignacion.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return asignacionPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.proyecto.quental.chat.model.impl.AsignacionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return asignacionPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.proyecto.quental.chat.model.impl.AsignacionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return asignacionPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return asignacionPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return asignacionPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Asignacion fetchAsignacion(long asignacionId)
        throws SystemException {
        return asignacionPersistence.fetchByPrimaryKey(asignacionId);
    }

    /**
     * Returns the asignacion with the primary key.
     *
     * @param asignacionId the primary key of the asignacion
     * @return the asignacion
     * @throws PortalException if a asignacion with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Asignacion getAsignacion(long asignacionId)
        throws PortalException, SystemException {
        return asignacionPersistence.findByPrimaryKey(asignacionId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return asignacionPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the asignacions.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.proyecto.quental.chat.model.impl.AsignacionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of asignacions
     * @param end the upper bound of the range of asignacions (not inclusive)
     * @return the range of asignacions
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Asignacion> getAsignacions(int start, int end)
        throws SystemException {
        return asignacionPersistence.findAll(start, end);
    }

    /**
     * Returns the number of asignacions.
     *
     * @return the number of asignacions
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getAsignacionsCount() throws SystemException {
        return asignacionPersistence.countAll();
    }

    /**
     * Updates the asignacion in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param asignacion the asignacion
     * @return the asignacion that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Asignacion updateAsignacion(Asignacion asignacion)
        throws SystemException {
        return asignacionPersistence.update(asignacion);
    }

    /**
     * Returns the asignacion local service.
     *
     * @return the asignacion local service
     */
    public com.proyecto.quental.chat.service.AsignacionLocalService getAsignacionLocalService() {
        return asignacionLocalService;
    }

    /**
     * Sets the asignacion local service.
     *
     * @param asignacionLocalService the asignacion local service
     */
    public void setAsignacionLocalService(
        com.proyecto.quental.chat.service.AsignacionLocalService asignacionLocalService) {
        this.asignacionLocalService = asignacionLocalService;
    }

    /**
     * Returns the asignacion remote service.
     *
     * @return the asignacion remote service
     */
    public com.proyecto.quental.chat.service.AsignacionService getAsignacionService() {
        return asignacionService;
    }

    /**
     * Sets the asignacion remote service.
     *
     * @param asignacionService the asignacion remote service
     */
    public void setAsignacionService(
        com.proyecto.quental.chat.service.AsignacionService asignacionService) {
        this.asignacionService = asignacionService;
    }

    /**
     * Returns the asignacion persistence.
     *
     * @return the asignacion persistence
     */
    public AsignacionPersistence getAsignacionPersistence() {
        return asignacionPersistence;
    }

    /**
     * Sets the asignacion persistence.
     *
     * @param asignacionPersistence the asignacion persistence
     */
    public void setAsignacionPersistence(
        AsignacionPersistence asignacionPersistence) {
        this.asignacionPersistence = asignacionPersistence;
    }

    /**
     * Returns the conversacion local service.
     *
     * @return the conversacion local service
     */
    public com.proyecto.quental.chat.service.ConversacionLocalService getConversacionLocalService() {
        return conversacionLocalService;
    }

    /**
     * Sets the conversacion local service.
     *
     * @param conversacionLocalService the conversacion local service
     */
    public void setConversacionLocalService(
        com.proyecto.quental.chat.service.ConversacionLocalService conversacionLocalService) {
        this.conversacionLocalService = conversacionLocalService;
    }

    /**
     * Returns the conversacion remote service.
     *
     * @return the conversacion remote service
     */
    public com.proyecto.quental.chat.service.ConversacionService getConversacionService() {
        return conversacionService;
    }

    /**
     * Sets the conversacion remote service.
     *
     * @param conversacionService the conversacion remote service
     */
    public void setConversacionService(
        com.proyecto.quental.chat.service.ConversacionService conversacionService) {
        this.conversacionService = conversacionService;
    }

    /**
     * Returns the conversacion persistence.
     *
     * @return the conversacion persistence
     */
    public ConversacionPersistence getConversacionPersistence() {
        return conversacionPersistence;
    }

    /**
     * Sets the conversacion persistence.
     *
     * @param conversacionPersistence the conversacion persistence
     */
    public void setConversacionPersistence(
        ConversacionPersistence conversacionPersistence) {
        this.conversacionPersistence = conversacionPersistence;
    }

    /**
     * Returns the mensaje local service.
     *
     * @return the mensaje local service
     */
    public com.proyecto.quental.chat.service.MensajeLocalService getMensajeLocalService() {
        return mensajeLocalService;
    }

    /**
     * Sets the mensaje local service.
     *
     * @param mensajeLocalService the mensaje local service
     */
    public void setMensajeLocalService(
        com.proyecto.quental.chat.service.MensajeLocalService mensajeLocalService) {
        this.mensajeLocalService = mensajeLocalService;
    }

    /**
     * Returns the mensaje remote service.
     *
     * @return the mensaje remote service
     */
    public com.proyecto.quental.chat.service.MensajeService getMensajeService() {
        return mensajeService;
    }

    /**
     * Sets the mensaje remote service.
     *
     * @param mensajeService the mensaje remote service
     */
    public void setMensajeService(
        com.proyecto.quental.chat.service.MensajeService mensajeService) {
        this.mensajeService = mensajeService;
    }

    /**
     * Returns the mensaje persistence.
     *
     * @return the mensaje persistence
     */
    public MensajePersistence getMensajePersistence() {
        return mensajePersistence;
    }

    /**
     * Sets the mensaje persistence.
     *
     * @param mensajePersistence the mensaje persistence
     */
    public void setMensajePersistence(MensajePersistence mensajePersistence) {
        this.mensajePersistence = mensajePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.proyecto.quental.chat.model.Asignacion",
            asignacionLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.proyecto.quental.chat.model.Asignacion");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Asignacion.class;
    }

    protected String getModelClassName() {
        return Asignacion.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = asignacionPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
