package com.proyecto.quental.chat.model.impl;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import com.proyecto.quental.chat.model.Conversacion;
import com.proyecto.quental.chat.model.ConversacionModel;
import com.proyecto.quental.chat.model.ConversacionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Conversacion service. Represents a row in the &quot;Conversacion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.proyecto.quental.chat.model.ConversacionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConversacionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConversacionImpl
 * @see com.proyecto.quental.chat.model.Conversacion
 * @see com.proyecto.quental.chat.model.ConversacionModel
 * @generated
 */
@JSON(strict = true)
public class ConversacionModelImpl extends BaseModelImpl<Conversacion>
    implements ConversacionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a conversacion model instance should use the {@link com.proyecto.quental.chat.model.Conversacion} interface instead.
     */
    public static final String TABLE_NAME = "Conversacion";
    public static final Object[][] TABLE_COLUMNS = {
            { "conversacionId", Types.BIGINT },
            { "nickName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "finDate", Types.TIMESTAMP },
            { "categoria", Types.VARCHAR },
            { "descripcion", Types.VARCHAR },
            { "etiquetas", Types.VARCHAR },
            { "asignado", Types.BOOLEAN },
            { "cerrada", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Conversacion (conversacionId LONG not null primary key,nickName VARCHAR(75) null,createDate DATE null,finDate DATE null,categoria VARCHAR(75) null,descripcion VARCHAR(75) null,etiquetas VARCHAR(75) null,asignado BOOLEAN,cerrada BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Conversacion";
    public static final String ORDER_BY_JPQL = " ORDER BY conversacion.conversacionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Conversacion.conversacionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.proyecto.quental.chat.model.Conversacion"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.proyecto.quental.chat.model.Conversacion"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.proyecto.quental.chat.model.Conversacion"),
            true);
    public static long ASIGNADO_COLUMN_BITMASK = 1L;
    public static long CERRADA_COLUMN_BITMASK = 2L;
    public static long CONVERSACIONID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.proyecto.quental.chat.model.Conversacion"));
    private static ClassLoader _classLoader = Conversacion.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Conversacion.class
        };
    private long _conversacionId;
    private String _nickName;
    private Date _createDate;
    private Date _finDate;
    private String _categoria;
    private String _descripcion;
    private String _etiquetas;
    private boolean _asignado;
    private boolean _originalAsignado;
    private boolean _setOriginalAsignado;
    private boolean _cerrada;
    private boolean _originalCerrada;
    private boolean _setOriginalCerrada;
    private long _columnBitmask;
    private Conversacion _escapedModel;

    public ConversacionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Conversacion toModel(ConversacionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Conversacion model = new ConversacionImpl();

        model.setConversacionId(soapModel.getConversacionId());
        model.setNickName(soapModel.getNickName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setFinDate(soapModel.getFinDate());
        model.setCategoria(soapModel.getCategoria());
        model.setDescripcion(soapModel.getDescripcion());
        model.setEtiquetas(soapModel.getEtiquetas());
        model.setAsignado(soapModel.getAsignado());
        model.setCerrada(soapModel.getCerrada());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Conversacion> toModels(ConversacionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Conversacion> models = new ArrayList<Conversacion>(soapModels.length);

        for (ConversacionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _conversacionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setConversacionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _conversacionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Conversacion.class;
    }

    @Override
    public String getModelClassName() {
        return Conversacion.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("conversacionId", getConversacionId());
        attributes.put("nickName", getNickName());
        attributes.put("createDate", getCreateDate());
        attributes.put("finDate", getFinDate());
        attributes.put("categoria", getCategoria());
        attributes.put("descripcion", getDescripcion());
        attributes.put("etiquetas", getEtiquetas());
        attributes.put("asignado", getAsignado());
        attributes.put("cerrada", getCerrada());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long conversacionId = (Long) attributes.get("conversacionId");

        if (conversacionId != null) {
            setConversacionId(conversacionId);
        }

        String nickName = (String) attributes.get("nickName");

        if (nickName != null) {
            setNickName(nickName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date finDate = (Date) attributes.get("finDate");

        if (finDate != null) {
            setFinDate(finDate);
        }

        String categoria = (String) attributes.get("categoria");

        if (categoria != null) {
            setCategoria(categoria);
        }

        String descripcion = (String) attributes.get("descripcion");

        if (descripcion != null) {
            setDescripcion(descripcion);
        }

        String etiquetas = (String) attributes.get("etiquetas");

        if (etiquetas != null) {
            setEtiquetas(etiquetas);
        }

        Boolean asignado = (Boolean) attributes.get("asignado");

        if (asignado != null) {
            setAsignado(asignado);
        }

        Boolean cerrada = (Boolean) attributes.get("cerrada");

        if (cerrada != null) {
            setCerrada(cerrada);
        }
    }

    @JSON
    @Override
    public long getConversacionId() {
        return _conversacionId;
    }

    @Override
    public void setConversacionId(long conversacionId) {
        _conversacionId = conversacionId;
    }

    @JSON
    @Override
    public String getNickName() {
        if (_nickName == null) {
            return StringPool.BLANK;
        } else {
            return _nickName;
        }
    }

    @Override
    public void setNickName(String nickName) {
        _nickName = nickName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getFinDate() {
        return _finDate;
    }

    @Override
    public void setFinDate(Date finDate) {
        _finDate = finDate;
    }

    @JSON
    @Override
    public String getCategoria() {
        if (_categoria == null) {
            return StringPool.BLANK;
        } else {
            return _categoria;
        }
    }

    @Override
    public void setCategoria(String categoria) {
        _categoria = categoria;
    }

    @JSON
    @Override
    public String getDescripcion() {
        if (_descripcion == null) {
            return StringPool.BLANK;
        } else {
            return _descripcion;
        }
    }

    @Override
    public void setDescripcion(String descripcion) {
        _descripcion = descripcion;
    }

    @JSON
    @Override
    public String getEtiquetas() {
        if (_etiquetas == null) {
            return StringPool.BLANK;
        } else {
            return _etiquetas;
        }
    }

    @Override
    public void setEtiquetas(String etiquetas) {
        _etiquetas = etiquetas;
    }

    @JSON
    @Override
    public boolean getAsignado() {
        return _asignado;
    }

    @Override
    public boolean isAsignado() {
        return _asignado;
    }

    @Override
    public void setAsignado(boolean asignado) {
        _columnBitmask |= ASIGNADO_COLUMN_BITMASK;

        if (!_setOriginalAsignado) {
            _setOriginalAsignado = true;

            _originalAsignado = _asignado;
        }

        _asignado = asignado;
    }

    public boolean getOriginalAsignado() {
        return _originalAsignado;
    }

    @JSON
    @Override
    public boolean getCerrada() {
        return _cerrada;
    }

    @Override
    public boolean isCerrada() {
        return _cerrada;
    }

    @Override
    public void setCerrada(boolean cerrada) {
        _columnBitmask |= CERRADA_COLUMN_BITMASK;

        if (!_setOriginalCerrada) {
            _setOriginalCerrada = true;

            _originalCerrada = _cerrada;
        }

        _cerrada = cerrada;
    }

    public boolean getOriginalCerrada() {
        return _originalCerrada;
    }

    @Override
    public int getStatus() {
        return 0;
    }

    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException {
        if (!isInTrash()) {
            return null;
        }

        TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
                getTrashEntryClassPK());

        if (trashEntry != null) {
            return trashEntry;
        }

        TrashHandler trashHandler = getTrashHandler();

        if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
            ContainerModel containerModel = null;

            try {
                containerModel = trashHandler.getParentContainerModel(this);
            } catch (NoSuchModelException nsme) {
                return null;
            }

            while (containerModel != null) {
                if (containerModel instanceof TrashedModel) {
                    TrashedModel trashedModel = (TrashedModel) containerModel;

                    return trashedModel.getTrashEntry();
                }

                trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

                if (trashHandler == null) {
                    return null;
                }

                containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
            }
        }

        return null;
    }

    @Override
    public long getTrashEntryClassPK() {
        return getPrimaryKey();
    }

    @Override
    public TrashHandler getTrashHandler() {
        return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
    }

    @Override
    public boolean isInTrash() {
        if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInTrashContainer() {
        TrashHandler trashHandler = getTrashHandler();

        if ((trashHandler == null) ||
                Validator.isNull(trashHandler.getContainerModelClassName())) {
            return false;
        }

        try {
            ContainerModel containerModel = trashHandler.getParentContainerModel(this);

            if (containerModel == null) {
                return false;
            }

            if (containerModel instanceof TrashedModel) {
                return ((TrashedModel) containerModel).isInTrash();
            }
        } catch (Exception e) {
        }

        return false;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Conversacion.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Conversacion toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Conversacion) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ConversacionImpl conversacionImpl = new ConversacionImpl();

        conversacionImpl.setConversacionId(getConversacionId());
        conversacionImpl.setNickName(getNickName());
        conversacionImpl.setCreateDate(getCreateDate());
        conversacionImpl.setFinDate(getFinDate());
        conversacionImpl.setCategoria(getCategoria());
        conversacionImpl.setDescripcion(getDescripcion());
        conversacionImpl.setEtiquetas(getEtiquetas());
        conversacionImpl.setAsignado(getAsignado());
        conversacionImpl.setCerrada(getCerrada());

        conversacionImpl.resetOriginalValues();

        return conversacionImpl;
    }

    @Override
    public int compareTo(Conversacion conversacion) {
        long primaryKey = conversacion.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Conversacion)) {
            return false;
        }

        Conversacion conversacion = (Conversacion) obj;

        long primaryKey = conversacion.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ConversacionModelImpl conversacionModelImpl = this;

        conversacionModelImpl._originalAsignado = conversacionModelImpl._asignado;

        conversacionModelImpl._setOriginalAsignado = false;

        conversacionModelImpl._originalCerrada = conversacionModelImpl._cerrada;

        conversacionModelImpl._setOriginalCerrada = false;

        conversacionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Conversacion> toCacheModel() {
        ConversacionCacheModel conversacionCacheModel = new ConversacionCacheModel();

        conversacionCacheModel.conversacionId = getConversacionId();

        conversacionCacheModel.nickName = getNickName();

        String nickName = conversacionCacheModel.nickName;

        if ((nickName != null) && (nickName.length() == 0)) {
            conversacionCacheModel.nickName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            conversacionCacheModel.createDate = createDate.getTime();
        } else {
            conversacionCacheModel.createDate = Long.MIN_VALUE;
        }

        Date finDate = getFinDate();

        if (finDate != null) {
            conversacionCacheModel.finDate = finDate.getTime();
        } else {
            conversacionCacheModel.finDate = Long.MIN_VALUE;
        }

        conversacionCacheModel.categoria = getCategoria();

        String categoria = conversacionCacheModel.categoria;

        if ((categoria != null) && (categoria.length() == 0)) {
            conversacionCacheModel.categoria = null;
        }

        conversacionCacheModel.descripcion = getDescripcion();

        String descripcion = conversacionCacheModel.descripcion;

        if ((descripcion != null) && (descripcion.length() == 0)) {
            conversacionCacheModel.descripcion = null;
        }

        conversacionCacheModel.etiquetas = getEtiquetas();

        String etiquetas = conversacionCacheModel.etiquetas;

        if ((etiquetas != null) && (etiquetas.length() == 0)) {
            conversacionCacheModel.etiquetas = null;
        }

        conversacionCacheModel.asignado = getAsignado();

        conversacionCacheModel.cerrada = getCerrada();

        return conversacionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{conversacionId=");
        sb.append(getConversacionId());
        sb.append(", nickName=");
        sb.append(getNickName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", finDate=");
        sb.append(getFinDate());
        sb.append(", categoria=");
        sb.append(getCategoria());
        sb.append(", descripcion=");
        sb.append(getDescripcion());
        sb.append(", etiquetas=");
        sb.append(getEtiquetas());
        sb.append(", asignado=");
        sb.append(getAsignado());
        sb.append(", cerrada=");
        sb.append(getCerrada());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.proyecto.quental.chat.model.Conversacion");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>conversacionId</column-name><column-value><![CDATA[");
        sb.append(getConversacionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nickName</column-name><column-value><![CDATA[");
        sb.append(getNickName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>finDate</column-name><column-value><![CDATA[");
        sb.append(getFinDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoria</column-name><column-value><![CDATA[");
        sb.append(getCategoria());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descripcion</column-name><column-value><![CDATA[");
        sb.append(getDescripcion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>etiquetas</column-name><column-value><![CDATA[");
        sb.append(getEtiquetas());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>asignado</column-name><column-value><![CDATA[");
        sb.append(getAsignado());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cerrada</column-name><column-value><![CDATA[");
        sb.append(getCerrada());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
