package com.proyecto.quental.chat.model.impl;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import com.proyecto.quental.chat.model.Mensaje;
import com.proyecto.quental.chat.model.MensajeModel;
import com.proyecto.quental.chat.model.MensajeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Mensaje service. Represents a row in the &quot;Mensaje&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.proyecto.quental.chat.model.MensajeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MensajeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MensajeImpl
 * @see com.proyecto.quental.chat.model.Mensaje
 * @see com.proyecto.quental.chat.model.MensajeModel
 * @generated
 */
@JSON(strict = true)
public class MensajeModelImpl extends BaseModelImpl<Mensaje>
    implements MensajeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a mensaje model instance should use the {@link com.proyecto.quental.chat.model.Mensaje} interface instead.
     */
    public static final String TABLE_NAME = "Mensaje";
    public static final Object[][] TABLE_COLUMNS = {
            { "mensajeId", Types.BIGINT },
            { "autor", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "contenido", Types.VARCHAR },
            { "conversacionId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Mensaje (mensajeId LONG not null primary key,autor VARCHAR(75) null,createDate DATE null,contenido VARCHAR(75) null,conversacionId LONG)";
    public static final String TABLE_SQL_DROP = "drop table Mensaje";
    public static final String ORDER_BY_JPQL = " ORDER BY mensaje.mensajeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Mensaje.mensajeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.proyecto.quental.chat.model.Mensaje"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.proyecto.quental.chat.model.Mensaje"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.proyecto.quental.chat.model.Mensaje"),
            true);
    public static long CONVERSACIONID_COLUMN_BITMASK = 1L;
    public static long MENSAJEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.proyecto.quental.chat.model.Mensaje"));
    private static ClassLoader _classLoader = Mensaje.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Mensaje.class
        };
    private long _mensajeId;
    private String _autor;
    private Date _createDate;
    private String _contenido;
    private long _conversacionId;
    private long _originalConversacionId;
    private boolean _setOriginalConversacionId;
    private long _columnBitmask;
    private Mensaje _escapedModel;

    public MensajeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Mensaje toModel(MensajeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Mensaje model = new MensajeImpl();

        model.setMensajeId(soapModel.getMensajeId());
        model.setAutor(soapModel.getAutor());
        model.setCreateDate(soapModel.getCreateDate());
        model.setContenido(soapModel.getContenido());
        model.setConversacionId(soapModel.getConversacionId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Mensaje> toModels(MensajeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Mensaje> models = new ArrayList<Mensaje>(soapModels.length);

        for (MensajeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _mensajeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMensajeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _mensajeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Mensaje.class;
    }

    @Override
    public String getModelClassName() {
        return Mensaje.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("mensajeId", getMensajeId());
        attributes.put("autor", getAutor());
        attributes.put("createDate", getCreateDate());
        attributes.put("contenido", getContenido());
        attributes.put("conversacionId", getConversacionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long mensajeId = (Long) attributes.get("mensajeId");

        if (mensajeId != null) {
            setMensajeId(mensajeId);
        }

        String autor = (String) attributes.get("autor");

        if (autor != null) {
            setAutor(autor);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        String contenido = (String) attributes.get("contenido");

        if (contenido != null) {
            setContenido(contenido);
        }

        Long conversacionId = (Long) attributes.get("conversacionId");

        if (conversacionId != null) {
            setConversacionId(conversacionId);
        }
    }

    @JSON
    @Override
    public long getMensajeId() {
        return _mensajeId;
    }

    @Override
    public void setMensajeId(long mensajeId) {
        _mensajeId = mensajeId;
    }

    @JSON
    @Override
    public String getAutor() {
        if (_autor == null) {
            return StringPool.BLANK;
        } else {
            return _autor;
        }
    }

    @Override
    public void setAutor(String autor) {
        _autor = autor;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public String getContenido() {
        if (_contenido == null) {
            return StringPool.BLANK;
        } else {
            return _contenido;
        }
    }

    @Override
    public void setContenido(String contenido) {
        _contenido = contenido;
    }

    @JSON
    @Override
    public long getConversacionId() {
        return _conversacionId;
    }

    @Override
    public void setConversacionId(long conversacionId) {
        _columnBitmask |= CONVERSACIONID_COLUMN_BITMASK;

        if (!_setOriginalConversacionId) {
            _setOriginalConversacionId = true;

            _originalConversacionId = _conversacionId;
        }

        _conversacionId = conversacionId;
    }

    public long getOriginalConversacionId() {
        return _originalConversacionId;
    }

    @Override
    public int getStatus() {
        return 0;
    }

    @Override
    public TrashEntry getTrashEntry() throws PortalException, SystemException {
        if (!isInTrash()) {
            return null;
        }

        TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
                getTrashEntryClassPK());

        if (trashEntry != null) {
            return trashEntry;
        }

        TrashHandler trashHandler = getTrashHandler();

        if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
            ContainerModel containerModel = null;

            try {
                containerModel = trashHandler.getParentContainerModel(this);
            } catch (NoSuchModelException nsme) {
                return null;
            }

            while (containerModel != null) {
                if (containerModel instanceof TrashedModel) {
                    TrashedModel trashedModel = (TrashedModel) containerModel;

                    return trashedModel.getTrashEntry();
                }

                trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

                if (trashHandler == null) {
                    return null;
                }

                containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
            }
        }

        return null;
    }

    @Override
    public long getTrashEntryClassPK() {
        return getPrimaryKey();
    }

    @Override
    public TrashHandler getTrashHandler() {
        return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
    }

    @Override
    public boolean isInTrash() {
        if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInTrashContainer() {
        TrashHandler trashHandler = getTrashHandler();

        if ((trashHandler == null) ||
                Validator.isNull(trashHandler.getContainerModelClassName())) {
            return false;
        }

        try {
            ContainerModel containerModel = trashHandler.getParentContainerModel(this);

            if (containerModel == null) {
                return false;
            }

            if (containerModel instanceof TrashedModel) {
                return ((TrashedModel) containerModel).isInTrash();
            }
        } catch (Exception e) {
        }

        return false;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Mensaje.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Mensaje toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Mensaje) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MensajeImpl mensajeImpl = new MensajeImpl();

        mensajeImpl.setMensajeId(getMensajeId());
        mensajeImpl.setAutor(getAutor());
        mensajeImpl.setCreateDate(getCreateDate());
        mensajeImpl.setContenido(getContenido());
        mensajeImpl.setConversacionId(getConversacionId());

        mensajeImpl.resetOriginalValues();

        return mensajeImpl;
    }

    @Override
    public int compareTo(Mensaje mensaje) {
        long primaryKey = mensaje.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Mensaje)) {
            return false;
        }

        Mensaje mensaje = (Mensaje) obj;

        long primaryKey = mensaje.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MensajeModelImpl mensajeModelImpl = this;

        mensajeModelImpl._originalConversacionId = mensajeModelImpl._conversacionId;

        mensajeModelImpl._setOriginalConversacionId = false;

        mensajeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Mensaje> toCacheModel() {
        MensajeCacheModel mensajeCacheModel = new MensajeCacheModel();

        mensajeCacheModel.mensajeId = getMensajeId();

        mensajeCacheModel.autor = getAutor();

        String autor = mensajeCacheModel.autor;

        if ((autor != null) && (autor.length() == 0)) {
            mensajeCacheModel.autor = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            mensajeCacheModel.createDate = createDate.getTime();
        } else {
            mensajeCacheModel.createDate = Long.MIN_VALUE;
        }

        mensajeCacheModel.contenido = getContenido();

        String contenido = mensajeCacheModel.contenido;

        if ((contenido != null) && (contenido.length() == 0)) {
            mensajeCacheModel.contenido = null;
        }

        mensajeCacheModel.conversacionId = getConversacionId();

        return mensajeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{mensajeId=");
        sb.append(getMensajeId());
        sb.append(", autor=");
        sb.append(getAutor());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", contenido=");
        sb.append(getContenido());
        sb.append(", conversacionId=");
        sb.append(getConversacionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.proyecto.quental.chat.model.Mensaje");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>mensajeId</column-name><column-value><![CDATA[");
        sb.append(getMensajeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>autor</column-name><column-value><![CDATA[");
        sb.append(getAutor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contenido</column-name><column-value><![CDATA[");
        sb.append(getContenido());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>conversacionId</column-name><column-value><![CDATA[");
        sb.append(getConversacionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
